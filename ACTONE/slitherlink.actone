-- Creating simple sorts so we do not have to use nat, and therefore avoid
-- constructors / accessors below being called with out of bounds parameters
SORT xs
OPS
	-- constructors
	0: -> xs
	1: -> xs
	2: -> xs

-- because there are n+1 lines on a board of size n
SORT xs-line
OPS
	-- constructors
	0: -> xs-line
	1: -> xs-line
	2: -> xs-line
	3: -> xs-line

SORT ys
OPS
	-- constructors
	0: -> ys
	1: -> ys

-- because there are n+1 lines on a board of size n
SORT ys-line
OPS
	-- constructors
	0: -> ys-line
	1: -> ys-line
	2: -> ys-line

SORT cell
OPS
	-- constructors
	empty: -> cell
	0: -> cell
	1: -> cell
	2: -> cell
	3: -> cell

-- board related data structures
SORT cellList
OPS
	-- constructors
	new-cl: cell cell cell cell cell cell -> cellList
	-- accessors
	get-cell: cellList xs ys -> cell
FORALL c: cell
AXIOMS
	(1) get-cell(new-cl(c, _, _, _, _, _), 0, 0) -> c
	(2) get-cell(new-cl(_, c, _, _, _, _), 1, 0) -> c
	(3) get-cell(new-cl(_, _, c, _, _, _), 2, 0) -> c
	(4) get-cell(new-cl(_, _, _, c, _, _), 0, 1) -> c
	(5) get-cell(new-cl(_, _, _, _, c, _), 1, 1) -> c
	(6) get-cell(new-cl(_, _, _, _, _, c), 2, 1) -> c


SORT segment
OPS
	-- constructors
	enabled: -> segment
	disabled: -> segment
	unknown: -> segment
	-- accessors
	count1: segment -> nat
FORALL s: segment
AXIOMS
	(1) count1(s) -> IF s == enabled THEN 1 ELSE 0


-- horizontal and vertical lines
SORT hLine
OPS
	-- constructors
	new-hl: segment segment segment -> hLine
	-- accessors
	get-hseg: hLine xs -> segment
FORALL s: segment
AXIOMS
	(1) get-hseg(new-hl(s, _, _), 0) -> s
	(2) get-hseg(new-hl(_, s, _), 1) -> s
	(3) get-hseg(new-hl(_, _, s), 2) -> s

SORT hLineList
OPS
	-- constructors
	new-hll: hLine hLine hLine -> hLineList
	-- accessors
	get-hline: hLineList ys-line -> hLine
FORALL h: hLine
AXIOMS
	(1) get-hline(new-hll(h, _, _), 0) -> h
	(2) get-hline(new-hll(_, h, _), 1) -> h
	(3) get-hline(new-hll(_, _, h), 2) -> h

SORT vLine
OPS
	-- constructors
	new-vl: segment segment -> vLine
	-- accessors
	get-vseg: vLine ys -> segment
FORALL s: segment
AXIOMS
	(1) get-vseg(new-vl(s, _), 0) -> s
	(2) get-vseg(new-vl(_, s), 1) -> s

SORT vLineList
OPS
	-- constructors
	new-vl: vLine vLine vLine vLine -> vLineList
	-- accessors
	get-vline: vLineList xs-line -> vLine
FORALL v: vLine
AXIOMS
	(1) get-vline(new-vl(v, _, _, _), 0) -> v
	(2) get-vline(new-vl(_, v, _, _), 1) -> v
	(3) get-vline(new-vl(_, _, v, _), 2) -> v
	(4) get-vline(new-vl(_, _, _, v), 3) -> v


-- board type
SORT board
OPS
	-- constructors
	createBoard: cellList hLineList vLineList -> board
	-- accessors
	get-cl: board -> cellList
	get-hll: board -> hLineList
	get-vll: board -> vLineList

	get-top: board xs ys -> segment
	get-right: board xs ys -> segment
	get-bottom: board xs ys -> segment
	get-left: board xs ys -> segment

	count-sides: board xs ys -> nat

	cell-sides-valid?: board xs ys -> bool
	all-cell-sides-valid?: board -> bool
	is-valid?: board -> bool

FORALL cb: createBoard
       x: xs
       y: ys
			 s1: segment
			 s2: segment
			 s3: segment
			 s4: segment
AXIOMS
	(1) get-cl(createBoard(cl, _, _)) -> cl
	(2) get-hll(createBoard(_, hll, _)) -> hll
	(3) get-vll(createBoard(_, _, vll)) -> vll

	(4) get-top(cb, 0, 0) -> get-hseg(get-hline(get-hll(cb), 0), 0)
	(5) get-top(cb, 0, 1) -> get-hseg(get-hline(get-hll(cb), 1), 0)
	(6) get-top(cb, 1, 0) -> get-hseg(get-hline(get-hll(cb), 0), 1)
	(7) get-top(cb, 1, 1) -> get-hseg(get-hline(get-hll(cb), 1), 1)
	(8) get-top(cb, 2, 0) -> get-hseg(get-hline(get-hll(cb), 0), 2)
	(9) get-top(cb, 2, 1) -> get-hseg(get-hline(get-hll(cb), 1), 2)

	(10) get-bottom(cb, 0, 0) -> get-top(0, 1)
	(11) get-bottom(cb, 0, 1) -> get-hseg(get-hline(get-hll(cb), 2), 0)
	(12) get-bottom(cb, 1, 0) -> get-top(1, 1)
	(13) get-bottom(cb, 1, 1) -> get-hseg(get-hline(get-hll(cb), 2), 1)
	(14) get-bottom(cb, 2, 0) -> get-top(2, 1)
	(15) get-bottom(cb, 2, 1) -> get-hseg(get-hline(get-hll(cb), 2), 2)

	(16) get-left(cb, 0, 0) -> get-vseg(get-vline(get-vll(cb), 0), 0)
	(17) get-left(cb, 0, 1) -> get-vseg(get-vline(get-vll(cb), 0), 1)
	(18) get-left(cb, 1, 0) -> get-vseg(get-vline(get-vll(cb), 1), 0)
	(19) get-left(cb, 1, 1) -> get-vseg(get-vline(get-vll(cb), 1), 1)
	(20) get-left(cb, 2, 0) -> get-vseg(get-vline(get-vll(cb), 2), 0)
	(21) get-left(cb, 2, 1) -> get-vseg(get-vline(get-vll(cb), 2), 1)

	(22) get-right(cb, 0, 0) -> get-left(1, 0)
	(23) get-right(cb, 0, 1) -> get-left(1, 1)
	(24) get-right(cb, 1, 0) -> get-left(2, 0)
	(25) get-right(cb, 1, 1) -> get-left(2, 1)
	(26) get-right(cb, 2, 0) -> get-vseg(get-vline(get-vll(cb), 3), 0)
	(27) get-right(cb, 2, 1) -> get-vseg(get-vline(get-vll(cb), 3), 1)

	(28) count-sides(cb, x, y) -> count1(get-top(cb, x, y)) + count1(get-right(cb, x, y)) + count1(get-bottom(cb, x, y)) + count1(get-left(cb, x, y))

	(29) cell-sides-valid?(cb, x, y) -> count-sides(cb, x, y) <= get-cell(get-cl(cb), x, y)

	(30) all-cell-sides-valid?(cb) ->
		cell-sides-valid?(cb, 0, 0) AND cell-sides-valid?(cb, 1, 0) AND cell-sides-valid?(cb, 2, 0) AND
		cell-sides-valid?(cb, 0, 1) AND cell-sides-valid?(cb, 1, 1) AND cell-sides-valid?(cb, 2, 1)

	(31) threes-corners-valid?(cb) ->
		(get-cell(get-cl(cb), 0, 0) != 3 OR (get-top(cb, 0, 0) != disabled AND get-left(cb, 0, 0) != disabled)) AND
		(get-cell(get-cl(cb), 2, 0) != 3 OR (get-top(cb, 2, 0) != disabled AND get-right(cb, 2, 0) != disabled)) AND
		(get-cell(get-cl(cb), 0, 1) != 3 OR (get-bottom(cb, 0, 1) != disabled AND get-left(cb, 0, 1) != disabled)) AND
		(get-cell(get-cl(cb), 2, 1) != 3 OR (get-bottom(cb, 2, 1) != disabled AND get-right(cb, 2, 1) != disabled))

	(31) twos-corners-valid?(cb) ->
		(get-cell(get-cl(cb), 0, 0) != 2 OR (get-left(cb, 0, 1) != disabled AND get-top(cb, 1, 0) != disabled)) AND
		(get-cell(get-cl(cb), 2, 0) != 2 OR (get-right(cb, 2, 1) != disabled AND get-top(cb, 1, 0) != disabled)) AND
		(get-cell(get-cl(cb), 0, 1) != 2 OR (get-left(cb, 0, 0) != disabled AND get-bottom(cb, 1, 1) != disabled)) AND
		(get-cell(get-cl(cb), 2, 1) != 2 OR (get-right(cb, 2, 0) != disabled AND get-bottom(cb, 1, 1) != disabled))

	(32) is-valid?(cb) -> all-cell-sides-valid?(cb) AND threes-corners-valid?(cb) AND twos-corners-valid?(cb)


-- Valid example 2 for reference
is-valid?(
	createBoard(
		new-cl(
			3,     empty, 3,
			empty, 3,     empty
		),
		new-hll(
			new-hl(enabled,  unknown, enabled),
			new-hl(enabled,  unknown, enabled),
			new-hl(disabled, enabled, disabled),
		),
		new-vl(
			new-vl(unknown,  disabled),
			new-vl(disabled, unknown),
			new-vl(disabled, unknown),
			new-vl(enabled,  disabled),
		)
	)
)
